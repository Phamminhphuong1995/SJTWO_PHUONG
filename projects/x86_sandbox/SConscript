import sys

import env
import fsops
from sources import Sources

"""
CLI
"""
verbose = GetOption("verbose")
no_clang_format = GetOption("no_clang_format")
no_unit_test = GetOption("no_unit_test")
test_output = GetOption("test_output")
timeout = GetOption("timeout")


"""
Imports
"""
Import("project_dirnode")


"""
Define file nodes and directory nodes
"""
PROJECT_DIR = project_dirnode

""" Build artifact nodes """
VARIANT_DIR = Dir("#/_build_{}".format(PROJECT_DIR.name))
OBJ_DIR = VARIANT_DIR.Dir("obj")
UNIT_TEST_BUILD_DIR = VARIANT_DIR.Dir("test")
MOCK_DIR = project_dirnode.Dir("unittest_header_overrides")

""" Source and include nodes """
INCLUDE_DIRS = []

EXCLUDED_INCLUDE_DIRNAMES = [
    MOCK_DIR.name,
    "test",
]

"""
Import build environment
"""
env_x86 = env.register_environment("env_x86")

""" Add/modify additional parameters """
env_x86 = env_x86.Clone(
    tools=["clangformat"]
)

env_x86.VariantDir(variant_dir=VARIANT_DIR, src_dir=Dir("."), duplicate=0)


"""
Search and group files to build
"""
all_sources = fsops.scan_tree(project_dirnode, ignore_dirnames=EXCLUDED_INCLUDE_DIRNAMES)
env_x86["CPPPATH"].extend(INCLUDE_DIRS)
env_x86["CPPPATH"].extend(all_sources.include_dirnodes)


"""
Perform builds
"""

""" Compile all sources -> objects """
obj_filenodes = []
for filenode in all_sources.source_filenodes + all_sources.assembly_filenodes:
    dest_filepath = fsops.ch_target_filenode(filenode, OBJ_DIR, "o")
    new_obj_filenodes = env_x86.Object(target=dest_filepath, source=filenode)
    obj_filenodes.extend(new_obj_filenodes)

exe_filenodes = env_x86.Program(target=VARIANT_DIR.File("{}.exe".format(PROJECT_DIR.name)), source=obj_filenodes)

if not no_clang_format:
    format_sources = fsops.scan_tree(project_dirnode, ignore_dirnames=None)

    for filenode in format_sources.source_filenodes + format_sources.include_filenodes:
        env_x86.ClangFormat(filenode=filenode, verbose=verbose)

if not no_unit_test:
    unit_test_results = env_x86.Test(
        source=PROJECT_DIR,
        target=UNIT_TEST_BUILD_DIR,
        sources=all_sources,
        prepend_include_dirnodes=MOCK_DIR,
        summary_only=not test_output,
        timeout=timeout,
        verbose=verbose,
    )
    Requires(obj_filenodes, unit_test_results)
